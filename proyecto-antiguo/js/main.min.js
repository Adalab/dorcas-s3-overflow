'use strict';


//form diseña
const radio = document.querySelector("form__subtitle__first-color");
const arrayForm = document.querySelectorAll(".form__input");

const saveLocalStore = (key, value) => {
  const objetoResetInit = JSON.parse(localStorage.getItem("objeto-update"));
  objetoResetInit[key] = value;
  localStorage.setItem("objeto-update", JSON.stringify(objetoResetInit));
}

const writeData = event => {
  const campoModificado = event.currentTarget;
  saveLocalStore(campoModificado.name, campoModificado.value);
    if(campoModificado.classList.contains("form__input") && !campoModificado.classList.contains("inputhref")){
     const elementInCard = document.querySelector(`.local-- ${campoModificado.name}`);
      elementInCard.innerHTML = campoModificado.value;
    } else if(campoModificado.classList.contains("inputhref")) {
      const hrefelement = document.querySelector(`. ${campoModificado.name} _button`);
      if(campoModificado.name === "email") {
        hrefelement.href = `mailto: ${campoModificado.value}`;
      } else if(campoModificado.name === "phone"){
        hrefelement.href = `tel: ${campoModificado.value}`;
      } else if(campoModificado.name === "linkedin"){
        hrefelement.href = `https://www.linkedin.com/in/ ${campoModificado.value}`;
      } else {
        hrefelement.href = `https://github.com/ ${campoModificado.value}`;
      }
    }
}


for(let a = 0; a < arrayForm.length; a++){
  arrayForm[a].addEventListener("keyup", writeData)
}


//COLAPSABLES//
const colapsables = document.querySelectorAll('.form__fill');
const tituloColapsable = document.querySelectorAll('.colapsable-titulo');

const cerrarOtrosColapsables = turnArrow => {
  for (let i = 0; i < colapsables.length; i++) {
    colapsables[i].classList.remove('colapsable--visible');
    turnArrow[i].classList.remove('arrow-down');
  }
}

const actualizarColapsable = event => {
  //cogemos todas flechas, esto nos devuelve el grupo de flechas como un array
  const turnArrow = document.querySelectorAll('.turn-arrow');
  const contenedor = event.currentTarget.parentElement;
  //en el html ponemos un data-donde a todos los elementos suceptibles de ser clikados, y recogemos el valor del data donde. los valores del data donde van a hacer match con los valores del array
  const clikedID = contenedor.getAttribute('data-donde');
  if (contenedor.classList.contains('colapsable--visible')) {
    contenedor.classList.remove('colapsable--visible');
    turnArrow[clikedID].classList.remove('arrow-down');
  } else {
    cerrarOtrosColapsables(turnArrow);
    contenedor.classList.add('colapsable--visible');
    turnArrow[clikedID].classList.add('arrow-down');
    }
  }
//cogemos la flecha cuya posicion en el array sea igual al data-donde del elemento clikado y le quitamos y le ponemos la clase que la hace girar.
for (let i = 0; i < tituloColapsable.length; i++) {
  tituloColapsable[i].addEventListener('click', actualizarColapsable);
}

//color radio buttom\
const preview = document.querySelector('.preview');
const colorsP = document.querySelectorAll('.radio-color');
//una clase -try- para dominarlos a todos

const changeColors = event => {
  const guiltyElement = event.currentTarget;
  const targetID = guiltyElement.getAttribute('data-donde');
  if (guiltyElement.checked === true) {
    preview.classList.remove('greenTarget', 'greyTarget','redTarget');
    preview.classList.add(targetID);
  }
}

for (let i = 0; i < colorsP.length; i++) {
  colorsP[i].addEventListener('click', changeColors);
}

//font radio buttom

let state;
const fontsP = document.querySelectorAll('.radio-font');
//una clase -radio-font- para dominarlos a todos
const changeFonts = event => {
  const guiltyElement = event.currentTarget;
  const state = guiltyElement.checked;
  const targetID = guiltyElement.getAttribute('data-donde');
  if (state === true) {
    preview.classList.remove('comicFont', 'montFont','ubuntuFont');
    preview.classList.add(targetID);
  }

}
for (let i = 0; i < fontsP.length; i++) {
  fontsP[i].addEventListener('click', changeFonts );
}

'use strict';

// CODIGO JS PARA AÑADIR IMAGEN

const fr = new FileReader();

const uploadBtn = document.querySelector('.action__upload-btn');

const fileField = document.querySelector('#img-selector');
const profileImage = document.querySelector('.profile-image__item');

const imagePreview = document.querySelector('.changeImagePreview');

const getImage = (e) => {
  var myFile = e.currentTarget.files[0];
  fr.addEventListener('load', writeImage);
  fr.readAsDataURL(myFile);
}

const writeImage= () => {
  profileImage.src = fr.result;
  imagePreview.src = fr.result;
}

const fakeFileClick = () => {
  fileField.click();
}

fileField.addEventListener('change', getImage);
uploadBtn.addEventListener('click', fakeFileClick);


// aqui acaba el codigo JS para añadir imagen

'use strict';

/// CODIGO SKILLS //
var tagsContainer = document.querySelector('.etiquetas-habilidades-container');
var button = document.querySelector('.button');
var divMadre = document.getElementById('mama');
var arraySkills = [];
var selectSkills;
var contadorClases = 1;
var container;
var buttonRemove;
var optionAsPlaceholderText = 'Elige habilidad';
var currentListOfSelects;
/////////////// FETCH PARA RECOGER LOS SKILLS DEL SERVIDOR /////////////////////////////

function searchArray() {
  fetch('https://raw.githubusercontent.com/Adalab/dorcas-s2-proyecto-data/master/skills.json')
    .then(function (response) {
      return response.json();
    })
    .then(function (json) {

      arraySkills = json.skills;
      arraySkills.push(optionAsPlaceholderText);
      arraySkills.reverse();
      createDiv();
    });
}


/////////////// FIN FETCH PARA RECOGER LOS SKILLS DEL SERVIDOR /////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////
//// CODIGO SKILLS //

function eliminaUltimoDiv() {

  if (contadorClases > 2) {
    var k = event.currentTarget.parentElement;
    k.parentElement.removeChild(k);
    button.classList.remove('hidden'); //Quita la clase Hidden si hay menos de 3 opciones para que aparezca el +
    contadorClases--;

    updateTagList();
  } else {
    alert("Tiene que introducir alguna habilidad");
  }
}

function createRemoveButton() {
  buttonRemove = document.createElement('button');
  buttonRemove.setAttribute("type", "button");
  var insertMinus = document.createElement("div");
  insertMinus.classList.add("content-button-habilities");
  var minus = document.createTextNode("-");
  insertMinus.appendChild(minus);
  buttonRemove.appendChild(insertMinus);
  container.appendChild(buttonRemove);
  buttonRemove.classList.add('buttonRemove');
  buttonRemove.addEventListener('click', eliminaUltimoDiv);
}

function changeSkills() {
  //creo una etiqueta select//
  selectSkills = document.createElement('select');
  selectSkills.setAttribute('name', 'hola');
  selectSkills.classList.add("form__select");
  container.appendChild(selectSkills);

  //bucle para rellenar el select con tantos options como colores haya en el arrayColors//
  for (var i = 0; i < arraySkills.length; i++) {
    //creamos el elemento option//
    var option = document.createElement('option');
    //creamos el texto de dentro del option, en este caso lo rellenamos con los strings que hay en arraySkills//
    var insertSkillToOption = document.createTextNode(arraySkills[i]);
    //Metemos los Strings dentro de los options//
    option.appendChild(insertSkillToOption);
    // metemoslos options dentro de los select//
    selectSkills.appendChild(option);
    selectSkills.addEventListener('change', updateTagList);
  }
}

function createDiv() {

  if (contadorClases < 3) {
    //creo un div//
    container = document.createElement('div');
    container.classList.add('container');
    divMadre.appendChild(container);
    changeSkills();
    createRemoveButton();
    contadorClases++;
  } else if (contadorClases === 3) {
    button.classList.add('hidden');

    container = document.createElement('div');
    container.classList.add('container');
    divMadre.appendChild(container);

    changeSkills();
    createRemoveButton();

    contadorClases++;
  } else {
    alert('Tiene que introducir alguna habilidad');
  }
}

searchArray();
button.addEventListener('click', createDiv);

////////////// AÑADIR A LA TARJETA ///////////////////


const updateTagList = () => {
  currentListOfSelects = document.querySelectorAll('.form__select');
  tagsContainer.innerHTML = ''; //limpio los skills del preview

  for (const currentSelect of currentListOfSelects) {
    if (currentSelect.value !== optionAsPlaceholderText) {
      tagsContainer.innerHTML += `<li class="etiqueta-habilidad"> ${currentSelect.value} </li>`;
    }
  }
}

//////////////////////////////////////////////////////////////////////////////////////
////////// ENVIO AL SERVIDOR /////////////////////////////////////////////////////////

const submitButton = document.querySelector('#submit');
const responseURL = document.querySelector('.response');
const form = document.querySelector('form');

const sendData = () => {
  const inputs = Array.from(form.elements);
  const json = getJSONFromInputs(inputs);
  json.skills = [];
  for (const currentSelect of  currentListOfSelects) {

    json.skills.push(currentSelect.value);
  }


  json.photo = fr.result;
  sendRequest(json);
}

const loadPhoto = () => {

  const myFile = document.querySelector('#img-selector').files[0];
  fr.addEventListener('load', sendData);
  fr.readAsDataURL(myFile);
}

submitButton.addEventListener('click', loadPhoto);

const getJSONFromInputs = (inputs) => {
  console.log(inputs);
  return inputs.reduce(function (acc, val) {
    if (val.type === 'radio' && val.checked === true) {
      acc[val.name] = val.value;
    }
    if ((val.nodeName !== 'BUTTON') && (val.nodeName !== 'FIELDSET') && (val.type !== 'radio')) {
      acc[val.name] = val.value;
    }

    return acc;
  }, {});
}


const sendRequest = (json) => {
  fetch('https://us-central1-awesome-cards-cf6f0.cloudfunctions.net/card/', {
      method: 'POST',
      body: JSON.stringify(json),
      headers: {
        'content-type': 'application/json'
      },
    })
    .then(function (resp) {
      return resp.json();
    })
    .then(function (result) {
      showURL(result);
    })
    .catch(function (error) {
      console.log(error);
    });
}

var twitterURL;

const showURL = (result) => {
  if (result.success) {
    responseURL.innerHTML = `La tarjeta ha sido creada: <br> <a href= ${result.cardURL} >  Haga click aquí </a>`;
  } else {
    responseURL.innerHTML = `ERROR: ${result.error}`;
  }
  twitterURL = result.cardURL;
}


const buttonTwitter = document.querySelector('.maketwitter');

const shareOnTwitter = () => {
  buttonTwitter.href = `https://twitter.com/intent/tweet?url= ${twitterURL} &text=Acabo%20de%20crear%20mi%20tarjeta%20con%20Font%20Awesome%20de%20Tarjetas-Martirio&hashtags=WomenInTech`;
}

buttonTwitter.addEventListener('click', shareOnTwitter);

'use strict';


var botonReset = document.querySelector(".button-reset__title");


//reset target
function callLocalStore() {
    var objetoReset = JSON.parse(localStorage.getItem("objeto-reset"));
    var imagePreviewReset = document.querySelector('.changeImagePreview');
    var profileImage = document.querySelector('.profile-image__item');
    profileImage.src = objetoReset.photo;
    imagePreview.src = objetoReset.photo;
    for(var i in objetoReset){
       var classReset= document.querySelector(".local--" + i);
        var inputReset= document.querySelector(".local--input--" + i);
       if (i !== "palette" && i !== "typography" && i !== "photo"){
       console.log(i)
     inputReset.value = "";}
       
    if(classReset.classList.contains('local--photo')){
        classReset.src = objetoReset[i];
        
    }
    else if (classReset.classList.contains('local--email')){
        classReset.href = 'mailto:' + objetoReset[i];
        
    }
    else if (classReset.classList.contains('local--phone')){
        classReset.href = 'tel:' + objetoReset[i];
        
    }
    else if (classReset.classList.contains('local--linkedin')){
        classReset.href =  objetoReset[i];
        
    }
    else if (classReset.classList.contains('local--github')){
        classReset.href =  objetoReset[i];
        
    }
    else if (classReset.classList.contains('local--palette')){
         var resetColorP = document.querySelectorAll('.radio-color');
        classReset.value =  objetoReset[i];
        var botonNumberC = classReset.value;
        resetColorP[botonNumberC].checked = false;
        preview.classList.remove('redTarget', 'greyTarget');
        preview.classList.add('greenTarget');
        var buttonDefaultColor = document.getElementById('form__subtitle__first-color');
        buttonDefaultColor.checked = true; 
        
    }
    else if (classReset.classList.contains('local--typography')){
        var resetFotnP = document.querySelectorAll('.radio-font');
        classReset.value =  objetoReset[i];
        var botonNumber = classReset.value;
        resetFotnP[botonNumber].checked = false;
        preview.classList.remove('montFont','ubuntuFont');
        preview.classList.add('comicFont');
        var buttonDefault = document.getElementById('form__subtitle__second-font');
        buttonDefault.checked = true;
    }
    
        else {
        classReset.innerHTML = objetoReset[i];
     } 
    }
   
}


botonReset.addEventListener("click", callLocalStore)

function sendObjectReset() {
    var objetoReset = {
        "name" : "Martirio",
        "job": "Reina de la canción",
         "phone": "982938437",
         "email": "reinadelacopla@ole.es",
         "linkedin": "juanita.reina",
         "github": "juanita-reina",
         "palette": "1",
         "typography": "2",
        "photo": "../images/martirio.jpg",
        //"skills": ["HTML", "Sass", "JavaScript"]
      };
localStorage.setItem("objeto-reset", JSON.stringify(objetoReset));

if (localStorage.getItem("objeto-update")=== null){
    localStorage.setItem("objeto-update", JSON.stringify(objetoReset));
}
}
sendObjectReset();


//# sourceMappingURL=main.min.js.map
